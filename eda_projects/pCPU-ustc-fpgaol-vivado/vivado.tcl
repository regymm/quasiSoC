#*****************************************************************************************
# Vivado (TM) v2020.2 (64-bit)
#
# vivado.tcl: Tcl script for re-creating project 'pCPU_project'
#
# Generated by Vivado on Thu Jan 06 21:26:41 CST 2022
# IP Build 3064653 on Wed Nov 18 14:17:31 MST 2020
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (vivado.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "/home/petergu/MyHome/quasiSoC/eda_projects/pCPU-ustc-fpgaol-vivado/pCPU_project.srcs/sources_1/ip/clock_wizard/clock_wizard.xci"
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/petergu/MyHome/quasiSoC/rtl/pCPU/register_file.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/pCPU/rv32m.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/pCPU/privilege.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/pCPU/register_file_bram.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/debounce.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/clocked_rom.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/serialboot.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/attributemap.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/cache/cache_cpu.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/uartreset.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/simple_rom.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/interrupt/interrupt_unit.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/console.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/mmapper.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/uart.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/w5500/w5500.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/cache/cacheway.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/hdmi_mkrvidor4000.sv"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/interrupt/timer_interrupt.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/hdmi_hw_fpga4fun.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/ch375b/ch375b.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/ps2/ps2.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/sdcard/sdcard.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/glyphmap.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/gpio/gpio.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/psram/burst/memory_controller_burst.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/simple_ram.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/baud_rate_gen.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/sdcard/sd_controller.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/simple_dp_ram.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/reset.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/ps2/ps2_driver.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/arbitrator.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/pCPU/alu.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/clk/clocking_xc7.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/psram/burst/memory_controller_basic.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/psram/burst/psram_controller_qpi.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/pCPU/riscv-multicyc.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/board-specific/ustc-fpgaol/quasi.vh"
#    "/home/petergu/MyHome/quasiSoC/rtl/board-specific/ustc-fpgaol/quasi_main.v"
#    "/home/petergu/MyHome/quasiSoC/rtl/board-specific/ustc-fpgaol/fpgaol1.xdc"
#    "/home/petergu/MyHome/quasiSoC/rtl/sim/top_simu.v"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
   "/home/petergu/MyHome/quasiSoC/eda_projects/pCPU-ustc-fpgaol-vivado/pCPU_project.srcs/sources_1/ip/clock_wizard/clock_wizard.xci" \
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set files [list \
   "/home/petergu/MyHome/quasiSoC/rtl/pCPU/register_file.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/pCPU/rv32m.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/pCPU/privilege.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/pCPU/register_file_bram.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/debounce.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/clocked_rom.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/serialboot.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/attributemap.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/cache/cache_cpu.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/uartreset.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/simple_rom.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/interrupt/interrupt_unit.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/console.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/mmapper.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/uart.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/w5500/w5500.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/cache/cacheway.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/hdmi_mkrvidor4000.sv" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/interrupt/timer_interrupt.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/hdmi_hw_fpga4fun.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/ch375b/ch375b.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/ps2/ps2.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/sdcard/sdcard.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/hdmi/glyphmap.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/gpio/gpio.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/psram/burst/memory_controller_burst.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/simple_ram.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/uart/baud_rate_gen.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/sdcard/sd_controller.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/simple_dp_ram.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/reset.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/ps2/ps2_driver.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/arbitrator.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/pCPU/alu.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/clk/clocking_xc7.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/psram/burst/memory_controller_basic.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/QuasiSoC/psram/burst/psram_controller_qpi.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/pCPU/riscv-multicyc.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/board-specific/ustc-fpgaol/quasi.vh" \
   "/home/petergu/MyHome/quasiSoC/rtl/board-specific/ustc-fpgaol/quasi_main.v" \
   "/home/petergu/MyHome/quasiSoC/rtl/board-specific/ustc-fpgaol/fpgaol1.xdc" \
   "/home/petergu/MyHome/quasiSoC/rtl/sim/top_simu.v" \
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "pCPU_project"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "vivado.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7a100tcsg324-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "corecontainer.enable" -value "1" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_core_container" -value "1" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "source_mgmt_mode" -value "DisplayOnly" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "30" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "30" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "30" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "30" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "30" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "30" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "30" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "345" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../../rtl/pCPU/register_file.v"] \
 [file normalize "${origin_dir}/../../rtl/pCPU/rv32m.v"] \
 [file normalize "${origin_dir}/../../rtl/pCPU/privilege.v"] \
 [file normalize "${origin_dir}/../../rtl/pCPU/register_file_bram.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/debounce.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/clocked_rom.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/uart/serialboot.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/hdmi/attributemap.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/cache/cache_cpu.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/uart/uartreset.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/simple_rom.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/interrupt/interrupt_unit.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/hdmi/console.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/mmapper.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/uart/uart.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/w5500/w5500.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/cache/cacheway.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/hdmi/hdmi_mkrvidor4000.sv"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/interrupt/timer_interrupt.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/hdmi/hdmi_hw_fpga4fun.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/ch375b/ch375b.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/ps2/ps2.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/sdcard/sdcard.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/hdmi/glyphmap.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/gpio/gpio.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/psram/burst/memory_controller_burst.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/simple_ram.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/uart/baud_rate_gen.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/sdcard/sd_controller.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/simple_dp_ram.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/reset.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/ps2/ps2_driver.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/arbitrator.v"] \
 [file normalize "${origin_dir}/../../rtl/pCPU/alu.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/clk/clocking_xc7.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/psram/burst/memory_controller_basic.v"] \
 [file normalize "${origin_dir}/../../rtl/QuasiSoC/psram/burst/psram_controller_qpi.v"] \
 [file normalize "${origin_dir}/../../rtl/pCPU/riscv-multicyc.v"] \
 [file normalize "${origin_dir}/../../rtl/board-specific/ustc-fpgaol/quasi.vh"] \
 [file normalize "${origin_dir}/../../rtl/board-specific/ustc-fpgaol/quasi_main.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../../rtl/QuasiSoC/hdmi/hdmi_mkrvidor4000.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../rtl/board-specific/ustc-fpgaol/quasi.vh"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "quasi_main" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/pCPU_project.srcs/sources_1/ip/clock_wizard/clock_wizard.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "clock_wizard/clock_wizard.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../../rtl/board-specific/ustc-fpgaol/fpgaol1.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../../rtl/board-specific/ustc-fpgaol/fpgaol1.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7a100tcsg324-1" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/../../rtl/sim/top_simu.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "hbs.configure_design_for_hier_access" -value "1" -objects $obj
set_property -name "nl.mode" -value "funcsim" -objects $obj
set_property -name "top" -value "top_simu" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
set_property -name "xsim.simulate.log_all_signals" -value "1" -objects $obj
set_property -name "xsim.simulate.runtime" -value "3000000ns" -objects $obj
set_property -name "xsim.simulate.saif_all_signals" -value "1" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a100tcsg324-1 -flow {Vivado Synthesis 2020} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2020" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "auto_incremental_checkpoint.directory" -value "/home/petergu/MyHome/pComputer/pCPU/vivado/pCPU_project/pCPU_project.srcs/utils_1/imports/synth_1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a100tcsg324-1 -flow {Vivado Implementation 2020} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2020" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "auto_incremental_checkpoint.directory" -value "/home/petergu/MyHome/pComputer/pCPU/vivado/pCPU_project/pCPU_project.srcs/utils_1/imports/impl_1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
